'use strict'

function acorn (engine, i, j) {
  engine.set(i - 1, j)
  engine.set(i, j + 2)
  engine.set(i + 1, j - 1)
  engine.set(i + 1, j)
  engine.set(i + 1, j + 3)
  engine.set(i + 1, j + 4)
  engine.set(i + 1, j + 5)
}

function custom (engine, i, j, pattern) {
  console.log(pattern)
  var x = 0, y = 0
  for (var char of pattern) {
    if (char == '\n') {
      x = 0
      y += 1
      continue
    }
    if (char == 'O') {
      engine.set(i + y, j + x)
      console.log(x + ', ' + y)
    }
    x += 1
  }
}
function ggg (engine, i, j) {
  const pattern = `
........................O
......................O.O
............OO......OO............OO
...........O...O....OO............OO
OO........O.....O...OO
OO........O...O.OO....O.O
..........O.....O.......O
...........O...O
............OO`
  console.log(pattern)
  var x = 0, y = 0
  for (var char of pattern) {
    if (char == '\n') {
      x = 0
      y += 1
      continue
    }
    if (char == 'O') {
      engine.set(i + y, j + x)
      console.log(x + ', ' + y)
    }
    x += 1
  }
}

function glider (engine, i, j) {
  const pattern = `
OOO
O
.O`
  console.log(pattern)
  var x = 0, y = 0
  for (var char of pattern) {
    if (char == '\n') {
      x = 0
      y += 1
      continue
    }
    if (char == 'O') {
      engine.set(i + y, j + x)
      console.log(x + ', ' + y)
    }
    x += 1
  }
}

function lwss (engine, i, j) {
  const pattern = `
.O..O
O
O...O
OOOO`
  console.log(pattern)
  var x = 0, y = 0
  for (var char of pattern) {
    if (char == '\n') {
      x = 0
      y += 1
      continue
    }
    if (char == 'O') {
      engine.set(i + y, j + x)
      console.log(x + ', ' + y)
    }
    x += 1
  }
}

function eden (engine, i, j) {
  const pattern = `
.O.OOO.O..
..O.O.O..O
O.OOO..OO.
.O.OOOOO.O
O..O..OOOO
OOOO..O..O
O.OOOOO.O.
.OO..OOO.O
O..O.O.O..
..O.OOO.O.`
  console.log(pattern)
  var x = 0, y = 0
  for (var char of pattern) {
    if (char == '\n') {
      x = 0
      y += 1
      continue
    }
    if (char == 'O') {
      engine.set(i + y, j + x)
      console.log(x + ', ' + y)
    }
    x += 1
  }
}

function cord (engine, i, j) {
  const pattern = `
............................OOO
...........................O...O
..........................O....O........OO...OOO
..........................O..O.O.......OOOO
..........................OO.O.O......O...OO
............................OO.O..O....OO.O.O
..................OOO.........OO..O
.................O..O..........OOO.............O......OO
................O....O......................O..O......O
................O..OOO.......................OOO
................O.....O
.................OOOOOOO
.......................O
.......................O
.....................OO
..............................................................OO
..............................................................O

........................OOO.O
........................OOO.O
.........................O........OO
..........................O...OOO.OO
...........................O......O
............................O.O.O.O...................................OO
.............................O........................................O.........O
.............................................................O................OOO
..OOO.......................................................O.O..............O
.O...O.....................................................OO.OO.............OO
O....O.....................................................OO.OO
O..O.O....................................................OOO
OO.O.O....................................................OOO...O
..OO.O..O..................................................OO
....OO..O..................................................O.O
.....OOO................................................................OO...OO
........................................................................O.O.O.O
.........................................................................OOOOO
..........................................................................OOO
...........................................................................O


...............................................OO
.............................................OOOOOO
............................................OOOOOO
...........................................O......O..........................OO
............................................OOO..............................O
........OO...................................OO...............................OOO
........O.......................................O........O......................O
.....................................................OO..OO.OOO
.....................................................O.....OOOO
.........................................................OO

...................................O...............O.............................O..O
..................................O.O............OOO............................O...OO..OO
................OO...............OO.OO..........O...............................O.......O
................O................OO.OO..........OO...................O...........OOOO........OO
................................OOO................................OOO.......................O
................................OOO...O...........................O............O
.................................OO...............................OO...O......OO
.................................O.O...................................OOO....O.O
..........................................................................O
.........................................................................OO
........................OO.................OO...OO
........................O...........................OOO
...........................................O.....O....O......OO...OO
.....................................................O........OOOOO
............................................OO.OO..............OOO
..............................................O.................O........OO...OO............OOOOO
..........................................................OOO............O.....O...........O.OOO.O
..........................................................O.................................O...O
................................................O..........O..............O...O..............OOO
...............................................O.O.........................OOO................O
..............................................O...O.........................................OO
..............................................OOOOO........................................O.O
.............................................OO...OO.......................................O.O
..............................................OOOOO.........................................O
...............................................OOO...........OOO
................................................O
.............................................................O.O..............O..........OO.O.OO
............................................................OOOOO...........OO.OO........O.....O
...........................................................OO...OO........................O...O
...........................................................OO...OO.........O.....O.........OOO

...........................................................................OO...OO


................................................OO
................................................O

.............................................................OO............................OO
.............................................................O.............................O

..............................................................................OO
..............................................................................O`
  console.log(pattern)
  var x = 0, y = 0
  for (var char of pattern) {
    if (char == '\n') {
      x = 0
      y += 1
      continue
    }
    if (char == 'O') {
      engine.set(i + y, j + x)
      console.log(x + ', ' + y)
    }
    x += 1
  }
}

function homer (engine, i, j) {
  const pattern = `
O.O......OOOOO.O
..OOO.O.O.OO..O.
.OO..O.O..OO...O
..O.O..OO.O..OO.
O..O....OOO...O.
...O.OOO.O......
OOOOOO.O.O.OO.O.
......OO.OO.OO..
..OOO.OOOOOOOO..
...OO.OOOO....OO
OOOOOO.O..O..O..
.O...OOO.OOO..OO
OOOOO.O...O.OO.O
OO......O..O....
OO.OOO..O.OOOOOO
..OO.O.O.OO..OO.`
  console.log(pattern)
  var x = 0, y = 0
  for (var char of pattern) {
    if (char == '\n') {
      x = 0
      y += 1
      continue
    }
    if (char == 'O') {
      engine.set(i + y, j + x)
      console.log(x + ', ' + y)
    }
    x += 1
  }
}

function cow (engine, i, j) {
  const pattern = `
OO.......OO..OO..OO..OO..OO..OO..OO
OO....O.OOO..OO..OO..OO..OO..OO..OO...OO
....OO.O.............................O.O
....OO...OOOOOOOOOOOOOOOOOOOOOOOOOOOOO
....OO.O..............................O
OO....O.OOO..OO..OO..OO..OO..OO..OO..OO
OO.......OO..OO..OO..OO..OO..OO..OO`
  console.log(pattern)
  var x = 0, y = 0
  for (var char of pattern) {
    if (char == '\n') {
      x = 0
      y += 1
      continue
    }
    if (char == 'O') {
      engine.set(i + y, j + x)
      console.log(x + ', ' + y)
    }
    x += 1
  }
}

function puffer (engine, i, j) {
  const pattern = `
.......O.................O.......
......OOO...............OOO......
.....OO....OOO.....OOO....OO.....
...OO.O..OOO..O...O..OOO..O.OO...
....O.O..O.O...O.O...O.O..O.O....
.OO.O.O.O.O....O.O....O.O.O.O.OO.
.OO...O.O....O.....O....O.O...OO.
.OOO.O...O....O.O.O....O...O.OOO.
OO.........OO.O.O.O.OO.........OO
............O.......O............
.........OO.O.......O.OO.........
..........O...........O..........
.......OO.O...........O.OO.......
.......OO...............OO.......
.......O.O.O.OOO.OOO.O.O.O.......
......OO...O...O.O...O...OO......
......O..O...O.O.O.O...O..O......
.........OO....O.O....OO.........
.....OO....O...O.O...O....OO.....
.........O.OO.O...O.OO.O.........
..........O.O.O.O.O.O.O..........
............O..O.O..O............
...........O.O.....O.O...........`
  console.log(pattern)
  var x = 0, y = 0
  for (var char of pattern) {
    if (char == '\n') {
      x = 0
      y += 1
      continue
    }
    if (char == 'O') {
      engine.set(i + y, j + x)
      console.log(x + ', ' + y)
    }
    x += 1
  }
}

function cross (engine, i, j) {
  engine.set(i - 1, j)
  engine.set(i, j - 1)
  engine.set(i, j)
  engine.set(i, j + 1)
  engine.set(i + 1, j)
}

function point (engine, i, j, value = 1) {
  engine.set(i, j, value)
}

function erase (engine, i, j) {
  engine.set(i - 1, j - 1, 0)
  engine.set(i - 1, j, 0)
  engine.set(i - 1, j + 1, 0)
  engine.set(i, j - 1, 0)
  engine.set(i, j, 0)
  engine.set(i, j + 1, 0)
  engine.set(i + 1, j - 1, 0)
  engine.set(i + 1, j, 0)
  engine.set(i + 1, j + 1, 0)
}

function random (engine, i, j) {
  for (var row = 0; row <= i; row++) {
    for(var col = 0; col <= j; col++) {
      if (Math.random() < .01) acorn(engine, row, col)
    }
  }
}

function clear (engine, i, j) {
  for (var row = 0; row <= i; row++) {
    for(var col = 0; col <= j; col++) {
      engine.set(row, col, 0)
    }
  }
}

export {
  acorn, cross, erase, point, random, clear, ggg, glider, lwss, eden, cord, homer, cow, puffer, custom
}
